#summary User guide for Google Code's issue tracker

<wiki:toc max_depth="1" />

= Introduction =

An issue tracker is an application that users and developers use to
maintain a database of software defects, enhancement requests,
technical-support requests, development tasks, and other issues that
the project members must work to resolve. Since they're so central to
each developer's daily work, many issue tracking systems have already
been built. Most existing issue tracker tools force developers to
follow a particular software development process by defining a set of
fields, possible values, and workflow states for each issue. The
result is often a complex tool that's difficult to use because it
includes many fields and options that aren't applicable to a given
issue.

In contrast, our issue tracker uses only a minimal set of fields, and
offers users the ability to store the information that they need as
labels. This approach is possible because it uses Google's free-text
search technology to search on all issue metadata.  Using labels
instead of fields makes the issue tracker much simpler to use.
Specifically, it allows developers to add any unsual information that
is important for a given issue without having to complicate the entire
user experience for every other issue.

----

= Quick start =

Here is how you can carry out the most common use cases with our issue tracker:

== How do I view open issues in a project? ==
   # Click the "Issues" tab in your project.


== How do I enter an issue? ==

   # Click the "Issues" tab in your project.
   # Click the "New issue" subtab.
   # Optionally, choose a different issue template.
   # Fill in the issue summary. In most cases you must edit the issue summary before the "Submit" button is enabled.
   # Fill in the issue description.
   # Optionally, attach screenshots or other files that help describe the issue.
   # If you are a project member or owner, you can also edit the issue status, owner, CCs, and labels.
   # Submit the issue


== How do I update an issue? ==
   # View the issue list.
   # Click on the row for the issue, this takes you to the issue detail page.
   # Click on the large text area at the bottom of the page, or the link "Add a comment and  make changes below".
   # Enter the text of your comment.
   # If you are a project member, you can also edit the project metadata.
   # Click the "Save changes" button


== How do I close an issue? ==
   # Follow the steps above to update the issue
   # Edit the status value to be one of the closed values.
   # Save changes

Only project members can close an issue.


== How do I get notified when an issue is changed? ==

There are four ways to be notified of issue changes:
   # Star the issue
   # Be listed as the issue owner or on the issue CC list
   # Subscribe to a mailing list that the project owner has set up for all issue change emails
   # Subscribe to the issue changes feed


----
= Concepts =

There are some obvious main concepts to understand when using our
issue tracker, and some that only become obvious with usage.

== Issues ==

Each issue represents a work item that project members must resolve.
Each issue is reported by a user who enters an initial summary and
description.  Issue descriptions are best written from the user's
perspective, detailing facts about the problem or need as they see it,
rather than getting into solution plans or implementation details.

Each issue can have one project member who owns the issue, meaning
that he/she is responsible for resolving it. And, each issue can list
other project members on the CC line.  Each issue has an optional
status and may have some labels, these are discussed below.

Users can add comments to an issue to provide additional information
that could be useful in resolving it. When a project member adds a
comments, he/she may also update the issue fields.


== Statuses and issue life-cycle ==

The status of an issue is a one-word indication of how far the issue
has progressed through an expected issue life-cycle. An issue
life-cycle can be thought of like a state machine.  This exact issue
life-cycle depends on the software development process followed by the
project team, and almost all projects will eventually have a few
exceptional issues that deviate from the expected life-cycle.  Our
issue tracking tool does not enforce specific transisitons through the
life-cycle or even limit the statuses to predefined values. Instead,
we guide users toward choosing the common values, but allow
exceptional statuses to be entered as well.

We do make one basic issue life-cycle assumption: some status values
are considered to be open, while others are considered to be closed.
Most development activity in a project should deal with open issues,
so searching within open issues is the default.  But, closed issues
can still be searched and updated, or even changed back to an open
status.

The expected issue life-cycle for most projects is something like this:
   # A user reports an issue and it has status `New`.
   # The issue is triaged by a project member, if it was not originally entered and triaged at the same time.  It may be rejected by setting its status to `Invalid`, `WontFix`, or `Duplicate`. Or, it may be `Accepted`. It it is accepted, it is may be labeled with a milestone and a priority within that milestone, and it may also be labeled to identify the part of the product affected or the nature of the cause of the problem.
   # The project owner may ask for more information and the initial reporter may add comments to provide that information.  The issue owner may set the status to `Started`.
   # Other users may provide additional comments that can help resolve the issue, or express their interest in having the issue resolved in a timely milestone.
   # If the original owner cannot work on the issue, or discovers that another project member would be a better person to work on the issue, it can be reassigned to another owner, or to no owner.  Likewise, if work on the issue cannot be fit into a given milestone, the issue can be slipped by labeling it with a later milestone, or the milestone label can be removed altogether.
   # Once the development work has been done to resolve the issue, it's status can be set to `Fixed`. If the team wishes to track which changes have been made but not yet incorporated into a release, they may decide to set the status to something like `FixPending`.
   # Teams that are deciplined about quality will ask the issue reporter or another team member to verify that the fix actually fixed the reported problem, and set the status to `Verified` once that has been done.
   # If verifcation fails, or if the original reporter adds a comment to say that the `Fixed` issue is still a problem, the issue can be set back to an open status.

== Labels ==

Labels are strings that are meaningful to people who participate in
the project, but they are not inteperted by the issue tracking tool
itself.  For example, an issue could be labeled `Hot` or `Security` or
`EasyToResolve`.  Clicking on a label will search for all open issues
that have that same label.

Our issue tracker goes beyond basic labels to support Key-Value
labels.  These labels contain one or more dashes in their name.  The
part before the first dash is called the "prefix" and is considered to
be a field name, and the part after that dash is considered to be the
value.  For example, `Priority-High` means that the priority of that
issue is high.  

An issue may have a multi-valued field if it has multiple labels that
start with the same prefix. For example, a defect that affects both the
user interface and the database layer of a program might be labeled
with `Component-UI` and `Component-DB`.  An issue that has no label
with a given prefix is considered to have no value for that field.
Some fields are intended to be only single-valued. For example, it
would be confusing for an issue to have both `Priority-High` and
`Priority-Low`.  

The project owner can specify a list of predefined labels and their
exact meaning within a project on the issue tracker administration
page.  He/she can also list the prefixes that should be treated as
exclusive (not multi-valued).  These choices affect the labels offered
in the label auto-complete menu, but they do not prevent project
members from entering exceptional values.


== Stars and notifictions ==

Any user can star an issue by clicking a star icon on the issue list
or issue detail page.  A star means that the user is interested in
that issue.  The issue tracker makes use of stars by:
   # Sending an email notification of issue changes to the users who have starred them.
   # Offering an "Open and starred by me" query scope so that users can see a list of all the issues that they have starred in a project and search within just those issues.
   # Displaying the number of users who have starred each issue so that project members may see which issues have the most interest.

Whenever an issue changes, an email notification is sent to users who
have starred it.  An email notification is also sent to the issue
owner, project members listed on the CC line, and to the
"all issue changes" email address, if one has been set up.  Also,
filter rules that match the issue may add more email addresses to
notify of changes.  Users may configure their email notification
preferences on the user settings page.  The user who reported an issue
is normally notified simply because of the fact that they have starred
the issue, which happens by default when the issue is entered.

Our issue tracker also offers a feed of issue changes.  You can
subscribe to it by clicking the "Project feeds" link on the project
home page.


== Templates ==

Project owners may create project templates to be used by users when
entering issues.  Each project template consists of a initial values
for the summary, description, status, owner, CC list, and labels.
These values are filled in on the issue entry page when the user uses
that template.  For example, there is one predefined template for
reporting a defect and one for requesting an enhancement.  Each
template has an initial description that asks the user questions that
prompt him/her to write a detailed issue.

There is one template that is the default for project members and one
for non-members.  Users see that default template when they click the
"New issue" link in the toolbar (immediately under the Issues
tab). However, users can change to any other template that is
available to them.  Also, the issue entry page can be bookmarked with
any selected template visible.


== Filter rules ==

Much like message filter rules in an email client, project owners can
now set up issue filter rules. These rules look for certain labels on
an issue, and then apply default values for the issue owner or status,
or add labels or CC addresses. Unlike email filter rules, issue filter
rules are applied after every issue change, not just when new issues
are entered. And, the field values that are derived in filter rules
are always default values: they never overwrite values that are
explicitly set on the issue. For example, default issue owners can be
defined based on `Component-*` labels.


